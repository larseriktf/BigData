import org.mongodb.scala._
import org.mongodb.scala.model.Aggregates._
import org.mongodb.scala.model.Filters._
import org.mongodb.scala.model.Projections._
import org.mongodb.scala.model.Sorts._
import org.mongodb.scala.model.Updates._
import org.mongodb.scala.model.UpdateOptions
import org.mongodb.scala.model._
import scala.concurrent.Await
import scala.concurrent.duration.Duration
import scala.collection.JavaConverters._
import org.mongodb.scala.bson.BsonObjectId
import java.io._


import java.util.List
import java.util.Arrays
import java.util.ArrayList
import java.util.concurrent.TimeUnit

object GetCostComparison extends App {
    implicit class DocumentObservable[C](val observable: Observable[Document]) extends ImplicitObservable[Document] {
        override val converter: (Document) => String = (doc) => doc.toJson
    }

    implicit class GenericObservable[C](val observable: Observable[C]) extends ImplicitObservable[C] {
        override val converter: (C) => String = (doc) => doc.toString
    }

    

    trait ImplicitObservable[C] {
        val observable: Observable[C]

        val converter: (C) => String
        def results(): Seq[C] = Await.result(observable.toFuture(), Duration(10, TimeUnit.SECONDS))
        def headResult() = Await.result(observable.head(), Duration(10, TimeUnit.SECONDS))
        def printResults(initial: String = ""): Unit = {
            if (initial.length > 0) print(initial)
            results.foreach(res => println(converter(res)))
        }
        def printHeadResult(initial: String = ""): Unit = println(s"${initial}${converter(headResult())}")
    }

    val mongoClient: MongoClient = MongoClient();
    val database: MongoDatabase = mongoClient.getDatabase("soci_econ_country_profiles");
    val collection: MongoCollection[Document] = database.getCollection("countryProfiles");

    println("Which Country would you like to compare?")
    println("Capital letter first!")
    val userInput = scala.io.StdIn.readLine();
    println("Next one: ")
    val comparison = scala.io.StdIn.readLine();

    //val c1 = collection.find(equal("country",Seq(Document("country" -> userInput), Document("country" -> comparison))))
    
    collection.find(in("country", userInput, comparison)).sort(descending("costOfLivingPlusRentIndex"))
    .projection(fields(include("country"), include("costOfLivingPlusRentIndex"), excludeId())).printResults();

    /*
    collection.find(or(equal("country",Seq(Document("country" -> userInput), Document("country" -> comparison)))))
    .projection(fields(include("country"), include("costOfLivingPlusRentIndex"), excludeId()))
    .printResults();
*/
/*
    collection.aggregate(Seq(
        Aggregates.group()
        
    )).printResults();
*/
}