Key: 
parentEducationAndGrades

value:
"eductionLevel":{
    "education": [1, 2, 3, 4],
    "averageGrades": {
        "gradeFather": [10, 10, 10, 9],
        "gradeMother": [15, 15, 15, 14]
    }
}

Programmed:
get all/updated students, foreach parent's education level, split on gender,
get grades, average with key = parentEducationAndGrades

------------

Key:
averageGradeWithStudyHours

Value:

    "averageGradesWithStudyHours":{
    "grades":{
        "gradeFemale": [15, 15, 15, 14],
        "gradeMale": [10, 15, 14, 13]
    },
    "weeklyStudyHours": ["<2", "2 - 5", "5 - 10", ">10"]
    }


Programmed:
for each studyTime value, create groups: gender, 
create groups: ("<2", "2 - 5", "5 - 10", ">10"), get average(grades)

------------

Key:
averageGradesVennDiagram

Value:
"averageGradesVennDiagram":{
        "internet-support": 15,
        "internet-extra": 14,
        "support-extra": 13,
        "all": 16,
        "internet": 12,
        "schoolSupport": 11,
        "extraCourses": 12
    }

Programmed:
get grades, for each grade, 
check XAND(internet && extraCourses && schoolSupport),
add grade to appropriate variable, add +1 to appropriate ticker,
return array with averages tied to the string values they have

-----------


Key:
freeTimeByStudents

Value:
"freeTimeByStudents":{
    "freeTime": [1, 2, 3, 4, 5],
    "percentageOfStudents": [11, 20, 30, 25, 14]
    }

Programmed:
group students by freeTime and calculate percentage of students in each group

------------

Key:
freeTimeWithStudyHours

Value:
"freeTimeWithStudyHours": {
    "freeTime": [1, 2, 3, 4, 5],
    "weeklyStudyHours": ["<2", "2 - 5", "5 - 10", ">10"]
    }

Programmed:
group students by freeTime
1: +int value for study time and average it
2: +int value for study time and average it
3: +int value for study time and average it
4: +int value for study time and average it
5: +int value for study time and average it

-------------

Key:
averageGradeFamilyAndAlcohol

Value:
"averageGradeFamilyAndAlcohol": {
    "familyRelation": [1, 2, 3, 4, 5],
    "alcoholConsumption": {
        "weekendAlcoholConsumption": [1, 2, 3, 4, 5],
        "weekdayAlcoholConsumption": [1, 2, 3, 4, 5]
    },
    "averageGrade": [12, 14, 11, 8, 7]
}

Programmed:
group students by XAND(familyRelation && alcoholConsumption),
get each groups' grades, average them


updating
recieve new/updated student-object,
get the data in the old object from KV-store,
get the data from the query-object from KV-store,
store updated query-object in KV-store (use same key),
store updated student-object in KV-store (use same student-key)


